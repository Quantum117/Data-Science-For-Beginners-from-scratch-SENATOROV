"""Git intro quiz 1."""

#
# 1) Как понять, что домашка пришла?
# * в чате  homework  появляеться сообщение прими пулл (с ником)
#
# 2) Как принять домашку?
# * на github desktop  нажимаем на кнопку  fetch origin
#
# 3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?
# * можем посмотреть на историию всех коммитов, при нажатии правой кнопки мыши появляются функции
#
# | Функция                  | Описание                                    |
# |---------------------------|---------------------------------------------|
# | **checkout commit**       | Переключиться на выбранный коммит           |
# | **reorder commit**        | Изменить порядок коммитов                   |
# | **revert changes in commit** | Отменить изменения из выбранного коммита |
# | **copy sha**              | Скопировать SHA коммита                     |
# | **view on github**        | Открыть коммит на GitHub                    |
#
#
# 3.1) Где брать ссылку на коммит? куда её отправлять?
# * на гитхабе
# 4) Что такое файл лога?
# * Файл который заполним и отправим в конце каждого урока
# 4.1) Когда нужно его пушить?
# 5) Что такое интерпритатор?
# * программа которая читаеть и запускает наш код
# 6) Где можно выбрать интерпритатор?
# * с помощью кнопки  base
# 7) Что такое модуль?
# * модуль это файл с окончанием .py либо .ipynb
# 8) Как создать и отправить коммит?
# * во вкладке changes отображаеться все изменения далее пишем название коммита нажимаем на  commit to main -> push origin
# 9) Как посмотреть что коммит точно отправлен и находится в github?
# * во вкладке  history  можем посмотреть  и можем перейти в гитхаб нажав на кнопку  view on github  и убедиться на это
# 10) Какая команда показывает что код не прошёл проверки на ошибки?
#  * если код не пройдеть появляеться окошечко error

# 10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.
# Pylint -> Pep8
# pydocstyle -> Проверяет docstring-и
# Flake8 -> Проверяет  ошибок в коде
# Mypy -> Проверяет типизацию
# 11) Как узнать какой именно линтер не прошёл проверку?
# * запускаем в терминале команду pre-commit run --all-files там где отображаеться Failed  с красным есть название линтера
# 12) Линтер Pylint видит markdown?
# * не видит
# 13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
# * если у нас есть ячеечки  markdown номер ячейки можеть иметь некоторое расхождение
# 14) Где посмотреть номер ячейки в vscode?
# * кнопка  cell , в нижнем правом углу.
# 15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
# *  в  ipynb  все отправляется в формате  json
# 16) Где посмотреть в какой ячейке ошибка?
# * запускаем в терминале команду pre-commit run --all-files там где отображаеться Failed  с красным есть ошибка
# 17) Как запустить терминал?
# * view -> terminal
# 18) Что такое линтер?
# * программа которая проверяеть файл на корректность
# 19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
# * https://www.pylint.org/
# 20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?
# pylint
# 21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
# *
# 21.1) С какой  git команды начинается утро программиста?
# * git pull
# 22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?
# * current repository -> open in visual studio code
# 23) Что такое stash?
#   Общее объяснение концепции.
#   * stash  позволяеть временно сохранять локальное изменение в буфер обмена и тем временем принимаеться изменение с интернета

# 23.1) Как сохранить стэш?
#
#    git командa(подсказка: https://t.me/c/1937296927/3602/19531):
#
#    git stash save " name of stash "
#
#    Кнопка в vs code:
#
#    stash changes and continue
#
# 23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?:
#
#   git команда(подсказка: https://t.me/c/1937296927/3602/19531)?:
#
#   git stash apply "NUMBER_STASH"
#
# 23.3) Различие между стэшем и коммитом.
#
#   Когда лучше сохранить изменения в стэше, а когда коммитить.
#
# Stash — это локально сохранённые изменения, которые не попадают в историю коммитов.
# Его используют, когда изменения ещё не готовы для коммита, но нужно временно их отложить
# Если изменения уже завершены и готовы, тогда лучше делать commit, чтобы сохранить их в истории проекта
#
# 23.4) Как просмотреть список сохраненных стэшей?
# git команда (подсказка: https://t.me/c/1937296927/3602/19531):
# git stash list
# 23.5)  Как удалить стэш?
#   Команды для удаления отдельных стэшей или всех сразу.
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):
#   git stash clear
# 23.6) Практические примеры использования стэша.
#   Краткие сценарии, где стэш помогает.
# * когда работаем в одном файле б в обшем в случаях когда необходимо временно сохранять локальних изменений
# 24) Где посмотреть что есть конфликт в файлах?
# 24.1) Когда он появляется?
# * в гитхаб десктоп появляеться красный треугольный значок с  восклицатьельным знаком
# 25) Как решить конфликт в файлах?
# * либо принять изменение с интернета и удалить своих или применить своих изменеие на изменение с гитхаба
# 26) Напишиие правильное утверждение
# * Зелёное то что пришло с гитхаба и синее локальные изменения
# 27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения?
# * да , можно
# 27.1) Что может произойти когда stash восстановите после принятия pull?
# * конфликты могут появиться
# 28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
# четыре способа :
# * accept current changes -  принимаеться толька изменений с гитхаба
# * accept incoming changes - принимаеться толька локальних изменений
# * accept both changes -   принимаеться оба
# * либо вручную тоже можно устранить -> resolve in merge editor ( кнопка)
# 29) Что делает кнопка complete merge?
# 30) В какой чат нужно писать если остались вопросы?
# *  help me
# ### 31) Что такое FORK?
# * скопирование чужой репозиторий с гитхаба
# * Зачем его делают?
# * чтобы внести изменение не ломая исходный код  либо предложить улучшений ( pull request )
# 32) Как скачать форкнутый репозиторий на локальный компьютер?
# clone repository
# 33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
# * 99% со стороны участников организации (преподователь либо студентов )
# 34) Как создать файл в vs code?
# * File -> new file
# 35) Файл лога нужно заполнять в конце каждого урока?
# * обьязательно

#
